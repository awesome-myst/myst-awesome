---
import DocsLayout from '@awesome-myst/myst-awesome/layouts/DocsLayout.astro';
import NavigationMenu from '@awesome-myst/myst-awesome/components/NavigationMenu.astro';

import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import { generatePageUrl } from '@awesome-myst/myst-awesome/lib/generate-page-url.ts';
import { generatePageToc } from '@awesome-myst/myst-awesome/lib/generate-page-toc.ts';
import { renderMystAst } from '@awesome-myst/myst-awesome/lib/render-myst-ast.ts';

export async function getStaticPaths() {
  try {
    console.log('Starting getStaticPaths for [...slug].astro');

    const pages = await getCollection('pages');
    const projectConfig = (await getCollection('projectFrontmatter'))[0];
    const foldersOption = projectConfig?.data?.options?.folders || false;

    console.log(`Folders option: ${foldersOption}`);
    console.log(`Total pages found: ${pages.length}`);

    const filteredPages = pages.filter((page) => page.id && page.id !== '/' && page.id.startsWith('/'));
    console.log(`Filtered pages: ${filteredPages.length}`);

    const paths = filteredPages.map((page, index) => {
      let slug = page.id.slice(1); // Remove leading slash

      console.log(`Processing page ${index + 1}: "${page.id}"`);

      if (!foldersOption) {
        // When folders is false (default), flatten the path by using only the filename
        const pathParts = slug.split('/');
        slug = pathParts[pathParts.length - 1] || slug;
        console.log(`  Flattened slug: "${slug}"`);
      } else {
        // When folders is true, encode forward slashes as '--' for URL compatibility
        // This works around Astro's limitation with forward slashes in route parameters
        slug = slug.replace(/\//g, '--');
        console.log(`  Encoded slug: "${slug}"`);
      }

      return {
        params: { slug },
        props: { page },
      };
    });

    console.log(`Generated ${paths.length} paths for [...slug].astro`);
    paths.forEach((path, i) => {
      console.log(`  Path ${i + 1}: slug="${path.params.slug}"`);
    });

    return paths;
  } catch (error) {
    console.error('Error in [...slug].astro getStaticPaths:', error);
    return [];
  }
}

interface PageProps {
  page: CollectionEntry<'pages'>;
}

const { page } = Astro.props as PageProps;

// Fetch all collections
const allPages = await getCollection('pages');
const projectConfig = (await getCollection('projectFrontmatter'))[0];

// Get folders option from site options
const foldersOption = projectConfig?.data?.options?.folders || false;

const showToc = !(typeof page.data.frontmatter?.options?.hide_outline !== 'undefined' ? page.data.frontmatter?.options?.hide_outline : projectConfig.data?.options?.hide_outline);
const showTitleBlock = !(typeof page.data.frontmatter?.options?.hide_title_block !== 'undefined' ? page.data.frontmatter?.options?.hide_title_block : projectConfig.data?.options?.hide_title_block);

// Extract metadata
const title = page.data.frontmatter?.title ||
              page.data.url ||
              'MyST Page';

const description = page.data.frontmatter?.description ||
                   page.data.description ||
                   projectConfig?.data.project?.description
                   || '';

// Get baseDir from site options or environment variable
const baseDir = projectConfig?.data?.options?.base_dir ||
                import.meta.env.BASE_DIR ||
                '';

// Create navigation items from all pages
const navItems = allPages
  .filter(p => p.id)
  .map(p => ({
    title: p.id === '/' ? 'Home' :
           (p.id.slice(1).charAt(0).toUpperCase() + p.id.slice(2)) || 'Page',
    href: generatePageUrl(p.id, foldersOption, baseDir),
    current: p.id === page.id,
    icon: p.id === '/' ? 'home' : 'file-text'
  }));

const tocItems = showToc ? generatePageToc(page.data) : [];

// Get prev/next pages for navigation
const currentIndex = allPages.findIndex(p => p.id === page.id);
const prevPage = currentIndex > 0 ? allPages[currentIndex - 1] : null;
const nextPage = currentIndex < allPages.length - 1 ? allPages[currentIndex + 1] : null;
---

<DocsLayout
  title={title}
  description={description}
  section="Guide"
  baseDir={baseDir}
  tocItems={tocItems}
  showToc={showToc}
  showBreadcrumbs={true}
  showTitleBlock={showTitleBlock}
  showFrontmatterBlock={true}
  showEditButton={true}
  lastModified={new Date()}
  frontmatter={page.data.frontmatter}
  nextPage={nextPage && nextPage.id ? {
    title: nextPage.id === '/' ? 'Home' : nextPage.id.slice(1),
    href: generatePageUrl(nextPage.id, foldersOption, baseDir)
  } : undefined}
  prevPage={prevPage && prevPage.id ? {
    title: prevPage.id === '/' ? 'Home' : prevPage.id.slice(1),
    href: generatePageUrl(prevPage.id, foldersOption, baseDir)
  } : undefined}
  showThemeSelector={true}
>
  <!-- Navigation Menu -->
  <NavigationMenu
    slot="navigation"
    items={navItems}
    showSearch={true}
    searchPlaceholder="Search documentation..."
    collapsible={true}
    showIcons={true}
  />

  <!-- Main Content -->
  {page.data ? (
    <!-- Render MyST content -->
    <div class="content-body" set:html={renderMystAst(page.data.mdast)} />

    <!-- Show frontmatter if available -->
    {page.data.frontmatter && Object.keys(page.data.frontmatter).length > 0 && (
      <details class="frontmatter-details">
        <summary>
          Page Frontmatter
        </summary>
        <pre class="frontmatter-code">{JSON.stringify(page.data.frontmatter, null, 2)}</pre>
      </details>
    )}
  ) : (
    <div class="loading-container">
      <p>Loading page content...</p>
    </div>
  )}
</DocsLayout>

<style>
  .loading-container {
    padding: 2rem;
    text-align: center;
    margin: 2rem 0;
  }

  .content-body {
    line-height: 1.7;
    font-size: 1rem;
  }

  .content-body h1,
  .content-body h2,
  .content-body h3,
  .content-body h4,
  .content-body h5,
  .content-body h6 {
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .content-body h1 { font-size: 2rem; }
  .content-body h2 { font-size: 1.5rem; }
  .content-body h3 { font-size: 1.25rem; }
  .content-body h4 { font-size: 1.125rem; }

  .frontmatter-details {
    margin-top: 2rem;
    border: 1px solid var(--wa-color-neutral-200);
    border-radius: var(--wa-border-radius-medium);
    overflow: hidden;
  }

  .frontmatter-details summary {
    padding: 1rem;
    background: var(--wa-color-neutral-50);
    cursor: pointer;
    font-weight: 500;
  }

  .frontmatter-code {
    padding: 1rem;
    margin: 0;
    background: var(--wa-color-neutral-100);
    font-size: 0.875rem;
    line-height: 1.5;
    overflow-x: auto;
  }

  /* Docs-only mobile behavior: hide TOC and aside at <=920px to prevent empty space */
  @media (max-width: 920px) {
    :global(.responsive-toc-wrapper) {
      display: none !important;
    }
    :global(.page-body.collapse-aside-920 .page-aside) {
      display: none !important;
    }
  }
</style>

<script>
  // Import Web Awesome components used to render MyST AST content
  import '@awesome-myst/myst-awesome/lib/wa-myst-editor.js';
</script>