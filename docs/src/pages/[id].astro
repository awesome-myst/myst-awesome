---
import { getCollection, getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  // Get all page entries from the pages collection
  const pages = await getCollection('pages');
  
  return pages.map((page) => ({
    params: { id: page.id === '/' ? 'index' : page.id.slice(1) }, // Remove leading slash and handle root
    props: { page },
  }));
}

interface Props {
  page: CollectionEntry<'pages'>;
}

const { page } = Astro.props;

// Fetch the actual content from the MyST content server
let pageContent: any = null;
let pageError: string | null = null;

try {
  const contentUrl = `http://localhost:3100${page.data.data}`;
  const response = await fetch(contentUrl);
  if (!response.ok) {
    throw new Error(`Failed to fetch page content: ${response.status}`);
  }
  pageContent = await response.json();
} catch (error) {
  pageError = error instanceof Error ? error.message : 'Unknown error';
}

// Get project frontmatter for site-wide configuration
const projectConfig = await getEntry('projectFrontmatter', 'project');

const title = pageContent?.frontmatter?.title || 
              pageContent?.title || 
              projectConfig?.data.project?.title || 
              'MyST Page';

const description = pageContent?.frontmatter?.description || 
                   pageContent?.description || 
                   projectConfig?.data.project?.description || 
                   'A MyST Markdown page';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
  </head>
  <body>
    <header>
      <h1>{projectConfig?.data.site?.title || 'MyST Site'}</h1>
      <nav>
        <a href="/">Home</a>
        <!-- Add more navigation items dynamically from pages collection -->
      </nav>
    </header>

    <main>
      {pageError ? (
        <div class="error">
          <h2>Error Loading Page</h2>
          <p>{pageError}</p>
          <pre>Page URL: {page.data.url}</pre>
          <pre>Data URL: {page.data.data}</pre>
        </div>
      ) : pageContent ? (
        <article>
          <h1>{title}</h1>
          
          {/* Display page metadata */}
          <div class="page-meta">
            <p><strong>Page URL:</strong> {page.data.url}</p>
            <p><strong>Kind:</strong> {page.data.kind}</p>
            {page.data.identifier && <p><strong>ID:</strong> {page.data.identifier}</p>}
          </div>

          {/* Render MyST content */}
          <div class="content">
            {pageContent.frontmatter && (
              <div class="frontmatter">
                <h2>Frontmatter</h2>
                <pre>{JSON.stringify(pageContent.frontmatter, null, 2)}</pre>
              </div>
            )}
            
            {pageContent.mdast && (
              <div class="ast-content">
                <h2>Content AST</h2>
                <pre>{JSON.stringify(pageContent.mdast, null, 2)}</pre>
              </div>
            )}
            
            {!pageContent.mdast && !pageContent.frontmatter && (
              <div class="raw-content">
                <h2>Raw Content</h2>
                <pre>{JSON.stringify(pageContent, null, 2)}</pre>
              </div>
            )}
          </div>
        </article>
      ) : (
        <div class="loading">
          <p>Loading page content...</p>
        </div>
      )}
    </main>

    <footer>
      <p>Powered by MyST Awesome Theme</p>
    </footer>
  </body>
</html>

<style>
  body {
    font-family: system-ui, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background: #f9f9f9;
  }

  header {
    background: #2c3e50;
    color: white;
    padding: 1rem 2rem;
  }

  header h1 {
    margin: 0;
    font-size: 1.5rem;
  }

  nav {
    margin-top: 0.5rem;
  }

  nav a {
    color: #ecf0f1;
    text-decoration: none;
    margin-right: 1rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
  }

  nav a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  main {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  article {
    padding: 2rem;
  }

  .page-meta {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 0.25rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
  }

  .page-meta p {
    margin: 0.25rem 0;
  }

  .content {
    margin-top: 1.5rem;
  }

  .frontmatter, .ast-content, .raw-content {
    margin-bottom: 2rem;
  }

  .frontmatter h2, .ast-content h2, .raw-content h2 {
    color: #2c3e50;
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 0.5rem;
  }

  pre {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 0.25rem;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .error {
    padding: 2rem;
    background: #f8d7da;
    color: #721c24;
    border-radius: 0.25rem;
    margin: 1rem;
  }

  .loading {
    padding: 2rem;
    text-align: center;
    color: #6c757d;
  }

  footer {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
    border-top: 1px solid #e9ecef;
    margin-top: 2rem;
  }
</style>
