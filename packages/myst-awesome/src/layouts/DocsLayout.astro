---
import BasePage from './BasePage.astro';
import TableOfContents from '../components/TableOfContents.astro';
import SearchDialog from '../components/SearchDialog.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

const projectConfig = (await getCollection('projectFrontmatter'))[0];
console.log('Project pages template config:', projectConfig);

const projectTitle = projectConfig?.data?.title ||
                     'Awesome Docs';

// Get logo path from site options
const logoPath = projectConfig?.data?.options?.logo;

const showTocDefault = !!!projectConfig.data?.options?.hide_outline;

// Dynamic import for logo if it exists
let logoImage: ImageMetadata | undefined;
if (logoPath) {
  try {
    // Load images from common asset locations using static glob patterns
    const images = import.meta.glob<{ default: ImageMetadata }>([
      '/*.{jpeg,jpg,png,gif,svg,webp}',
      '/src/assets/**/*.{jpeg,jpg,png,gif,svg,webp}',
      '/public/**/*.{jpeg,jpg,png,gif,svg,webp}',
      '/assets/**/*.{jpeg,jpg,png,gif,svg,webp}',
      '/docs/assets/**/*.{jpeg,jpg,png,gif,svg,webp}',
      '/images/**/*.{jpeg,jpg,png,gif,svg,webp}',
      '/static/**/*.{jpeg,jpg,png,gif,svg,webp}'
    ], { eager: true });

    // Normalize the logo path
    const normalizedPath = logoPath.startsWith('/') ? logoPath : `/${logoPath}`;

    // Try exact path match first
    if (images[normalizedPath]) {
      logoImage = images[normalizedPath].default;
    } else {
      // If not found, search by filename in any of the loaded directories
      const filename = logoPath.split('/').pop();
      const matchingImage = Object.entries(images).find(([path]) =>
        path.endsWith(`/${filename}`) || path === `/${filename}`
      );

      if (matchingImage) {
        logoImage = matchingImage[1].default;
      } else {
        console.warn(`Logo image not found: ${logoPath}. Searched in common asset directories.`);
      }
    }
  } catch (error) {
    console.error('Error loading logo:', error);
  }
}
interface TocItem {
  level: number;
  title: string;
  href: string;
  id?: string;
}

export interface Props {
  title?: string;
  description?: string;
  // theme?: 'default' | 'awesome' | 'shoelace' | 'brutalist' | 'glossy' | 'matter' | 'mellow' | 'playful' | 'premium' | 'tailspin';
  theme?: 'default' | 'awesome' | 'shoelace';
  colorScheme?: 'light' | 'dark' | 'auto';
  tocItems?: TocItem[];
  showToc?: boolean;
  showBreadcrumbs?: boolean;
  showEditButton?: boolean;
  editUrl?: string;
  lastModified?: Date;
  author?: string;
  section?: string;
  nextPage?: { title: string; href: string };
  prevPage?: { title: string; href: string };
  showThemeSelector?: boolean; // new prop to enable theme selector
  showColorSchemeSelector?: boolean; // new prop to enable color scheme selector
  baseDir?: string; // prefix for search dialog URLs (e.g., "/book")
}

const {
  title,
  description,
  theme = 'default',
  colorScheme = 'auto',
  tocItems,
  showToc = showTocDefault,
  showBreadcrumbs = true,
  showEditButton = false,
  editUrl,
  lastModified,
  author,
  section,
  nextPage,
  prevPage,
  showThemeSelector = false,
  showColorSchemeSelector = true,
  baseDir,
  ...rest
} = Astro.props;
---

<BasePage
  title={title}
  description={description}
  theme={theme}
  colorScheme={colorScheme}
  mobileBreakpoint="920px"
  {...rest}
>
  <!-- Header with branding and controls -->
  <div slot="header" class="docs-header">
    <div class="docs-branding">
      <a href="/" class="brand-link">
        <wa-icon name="book" variant="solid"></wa-icon>
        <span class="brand-text">{projectTitle}</span>
      </a>
      {section && <wa-badge variant="neutral" class="section-badge">{section}</wa-badge>}
    </div>

    <div class="docs-controls">
      <!-- Theme selector (optional) -->
      {showThemeSelector && (
        <wa-select class="theme-selector" appearance="filled" size="small" value={theme}>
          <wa-icon slot="start" name="paintbrush" variant="regular"></wa-icon>
          <wa-option value="default">Default</wa-option>
          <wa-option value="awesome">Awesome</wa-option>
          <wa-option value="shoelace">Shoelace</wa-option>
        </wa-select>
      )}

      {showColorSchemeSelector && (
        <div class="color-scheme-toggle" role="group" aria-label="Color scheme">
          <wa-button class="color-btn" appearance="outlined" size="small" data-value="light" title="Light mode" aria-label="Light mode">
            <wa-icon name="sun" variant="regular"></wa-icon>
          </wa-button>
          <wa-button class="color-btn" appearance="outlined" size="small" data-value="dark" title="Dark mode" aria-label="Dark mode">
            <wa-icon name="moon" variant="regular"></wa-icon>
          </wa-button>
          <wa-button class="color-btn" appearance="outlined" size="small" data-value="auto" title="System" aria-label="System">
            <wa-icon name="display"></wa-icon>
          </wa-button>
        </div>
      )}
    </div>
  </div>

  <!-- Breadcrumbs in subheader -->
  {showBreadcrumbs && (
    <div slot="subheader" class="docs-breadcrumbs">
      <wa-breadcrumb>
        <wa-breadcrumb-item href="/">
          <wa-icon slot="start" name="house" variant="solid"></wa-icon>
          Home
        </wa-breadcrumb-item>
        <wa-breadcrumb-item href="/docs">Documentation</wa-breadcrumb-item>
        {section && <wa-breadcrumb-item href={`/docs/${section.toLowerCase()}`}>{section}</wa-breadcrumb-item>}
        <wa-breadcrumb-item>{title}</wa-breadcrumb-item>
      </wa-breadcrumb>
    </div>
  )}

  <!-- Navigation sidebar -->
  <div slot="navigation-header" class="nav-header">
    {logoImage && (
      <div class="nav-logo">
        <Image
          src={logoImage}
          alt={`${projectTitle} logo`}
          width={120}
          class="project-logo"
        />
      </div>
    )}
    <!-- Desktop search (hidden on mobile) -->
    <div class="desktop-search-container">
      <SearchDialog baseDir={baseDir} />
    </div>
  </div>

  <nav slot="navigation" class="docs-navigation">
    <div class="nav-section">
      <h3 class="nav-section-title">Getting Started</h3>
      <ul class="nav-list">
        <li><a href="/docs/installation" class="nav-link">Installation</a></li>
        <li><a href="/docs/quickstart" class="nav-link">Quick Start</a></li>
        <li><a href="/docs/configuration" class="nav-link">Configuration</a></li>
      </ul>
    </div>

    <div class="nav-section">
      <h3 class="nav-section-title">Components</h3>
      <ul class="nav-list">
        <li><a href="/docs/components/layout" class="nav-link current">Layout</a></li>
        <li><a href="/docs/components/navigation" class="nav-link">Navigation</a></li>
        <li><a href="/docs/components/content" class="nav-link">Content</a></li>
      </ul>
    </div>

    <div class="nav-section">
      <h3 class="nav-section-title">Theming</h3>
      <ul class="nav-list">
        <li><a href="/docs/theming/colors" class="nav-link">Colors</a></li>
        <li><a href="/docs/theming/typography" class="nav-link">Typography</a></li>
        <li><a href="/docs/theming/customization" class="nav-link">Customization</a></li>
      </ul>
    </div>
  </nav>

  <!-- Main content with article wrapper -->
  <article class="docs-article myst-content">
    <!-- Article header -->
    <header class="article-header">
      <h1 class="article-title">{title}</h1>
      {description && <p class="article-description">{description}</p>}

      <div class="article-meta">
        {author && <span class="article-author">By {author}</span>}
        {lastModified && (
          <time class="article-date" datetime={lastModified.toISOString()}>
            Updated {lastModified.toLocaleDateString()}
          </time>
        )}
        {showEditButton && editUrl && (
          <a href={editUrl} class="edit-link">
            <wa-icon name="pencil" variant="regular"></wa-icon>
            Edit this page
          </a>
        )}
      </div>
    </header>

    <!-- Main content -->
    <div class="article-content">
      <slot />
    </div>

    <!-- Navigation footer -->
    {(prevPage || nextPage) && (
      <nav class="article-nav">
        {prevPage && (
          <a href={prevPage.href} class="nav-prev">
            <wa-icon name="arrow-left" variant="regular"></wa-icon>
            <div>
              <span class="nav-label">Previous</span>
              <span class="nav-title">{prevPage.title}</span>
            </div>
          </a>
        )}

        {nextPage && (
          <a href={nextPage.href} class="nav-next">
            <div>
              <span class="nav-label">Next</span>
              <span class="nav-title">{nextPage.title}</span>
            </div>
            <wa-icon name="arrow-right" variant="regular"></wa-icon>
          </a>
        )}
      </nav>
    )}
  </article>

  <!-- Table of contents sidebar -->
  {showToc && tocItems && tocItems.length > 0 && (
    <div slot="aside" class="responsive-toc-wrapper">
      <TableOfContents
        items={tocItems}
        title="On this page"
        sticky={true}
        collapsible={false}
        showNumbers={false}
      />
    </div>
  )}

  <!-- Footer -->
  <Footer slot="footer" />
</BasePage>

<script>
  // Import Web Awesome components used in this page
  import '@awesome.me/webawesome/dist/components/select/select.js';
  import '@awesome.me/webawesome/dist/components/option/option.js';
  import '@awesome.me/webawesome/dist/components/divider/divider.js';
  import '@awesome.me/webawesome/dist/components/breadcrumb/breadcrumb.js';
  import '@awesome.me/webawesome/dist/components/breadcrumb-item/breadcrumb-item.js';
  import '@awesome.me/webawesome/dist/components/badge/badge.js';
  import '@awesome.me/webawesome/dist/components/input/input.js';
  import '@awesome.me/webawesome/dist/components/button/button.js';
  import '@awesome.me/webawesome/dist/components/icon/icon.js';

  // Add responsive class for 920px breakpoint aside collapsing
  document.addEventListener('DOMContentLoaded', () => {
    const pageBody = document.querySelector('.page-body');
    if (pageBody) {
      pageBody.classList.add('collapse-aside-920');
    }

    // Theme switching functionality
    const themeSelector = document.querySelector('.theme-selector') as any;
  const colorSchemeToggle = document.querySelector('.color-scheme-toggle') as HTMLElement | null;

    if (themeSelector) {
      // Set initial value from localStorage
      const savedTheme = localStorage.getItem('theme') || 'default';
      try { themeSelector.value = savedTheme; } catch {}

      // Web Awesome select components emit 'change' events
      themeSelector.addEventListener('change', (e: any) => {
        const value = (e.target as any)?.value ?? 'default';
        if ((window as any).setTheme) {
          (window as any).setTheme(value);
        }
      });
    }

    if (colorSchemeToggle) {
      const buttons = Array.from(colorSchemeToggle.querySelectorAll<HTMLButtonElement>('.color-btn'));
      const order: Array<'light' | 'dark' | 'auto'> = ['light', 'dark', 'auto'];
      const setActive = (value: string) => {
        buttons.forEach((btn) => {
          const isActive = btn.dataset.value === value;
          btn.classList.toggle('active', isActive);
          btn.setAttribute('aria-pressed', String(isActive));
        });
      };

      // Initialize from localStorage
      const initial = (localStorage.getItem('color-scheme') as 'light' | 'dark' | 'auto') || 'auto';
      setActive(initial);

      // Click-to-cycle: clicking the visible (active) button cycles to next state
      colorSchemeToggle.addEventListener('click', (evt) => {
        const active = colorSchemeToggle.querySelector<HTMLButtonElement>('.color-btn.active');
        if (!active) return;
        // Only cycle if the active button (or its contents) were clicked
        const target = evt.target as HTMLElement;
        if (!active.contains(target)) return;

        const current = (active.dataset.value as 'light' | 'dark' | 'auto') || 'auto';
        const next = order[(order.indexOf(current) + 1) % order.length];
        setActive(next);
        if ((window as any).setColorScheme) {
          (window as any).setColorScheme(next);
        }
      });

      // Also support direct selection if custom UI triggers events in the future
      buttons.forEach((btn) => {
        btn.addEventListener('select', () => {
          const value = (btn.dataset.value as 'light' | 'dark' | 'auto') || 'auto';
          setActive(value);
          if ((window as any).setColorScheme) {
            (window as any).setColorScheme(value);
          }
        });
      });
    }
  });
</script>

<style>
  /* Documentation-specific styles */

  .desktop-search-container {
    display: block;
    width: 100%;
  }

  /* Show mobile search and hide desktop search on mobile */
  @media (max-width: 920px) {
    .desktop-search-container {
      display: none;
    }
  }

  /* Header */
  .docs-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    gap: var(--wa-space-m);
    flex-wrap: wrap;
  }

  @media (max-width: 920px) {
    .docs-header {
      flex-wrap: nowrap;
      gap: var(--wa-space-s);
    }
  }

  .docs-branding {
    display: flex;
    align-items: center;
    gap: var(--wa-space-s);
  }

  .brand-link {
    display: flex;
    align-items: center;
    gap: var(--wa-space-xs);
    text-decoration: none;
    color: var(--wa-color-text-normal);
    font-weight: var(--wa-font-weight-semibold);
    font-size: var(--wa-font-size-l);
  }

  .brand-link:hover {
    color: var(--wa-color-brand-fill-loud);
  }

  .brand-text {
    font-family: var(--wa-font-family-heading);
  }

  .section-badge {
    font-size: var(--wa-font-size-xs);
  }

  .docs-controls {
    display: flex;
    align-items: center;
    gap: var(--wa-space-s);
  }

  /* Color scheme toggle */
  .color-scheme-toggle {
    display: inline-flex;
    align-items: center;
    gap: 2px;
    padding: 2px;
    background: var(--wa-color-surface-lowered);
    border: 1px solid var(--wa-color-surface-border);
    border-radius: var(--wa-border-radius-l);
  }
  .color-scheme-toggle .color-btn {
    --_btn-padding-inline: 6px;
    --_btn-padding-block: 4px;
    border: none;
    background: transparent;
    color: var(--wa-color-text-quiet);
    border-radius: var(--wa-border-radius-m);
  }
  /* Show only the active icon/button */
  .color-scheme-toggle .color-btn:not(.active) {
    display: none;
  }
  .color-scheme-toggle .color-btn wa-icon {
    font-size: 1rem;
  }
  .color-scheme-toggle .color-btn.active {
    background: var(--wa-color-brand-fill-quiet);
    color: var(--wa-color-brand-on-quiet);
  }
  /* A simple single icon is used for System (auto) */

  .search-shortcut {
    font-family: var(--wa-font-family-code);
    font-size: var(--wa-font-size-xs);
    padding: var(--wa-space-3xs) var(--wa-space-2xs);
    background-color: var(--wa-color-neutral-fill-quiet);
    border: 1px solid var(--wa-color-neutral-border-normal);
    border-radius: var(--wa-border-radius-s);
  }

  /* Breadcrumbs */
  .docs-breadcrumbs {
    width: 100%;
  }

  /* Navigation */
  .nav-header {
    padding: var(--wa-space-m);
    border-bottom: 1px solid var(--wa-color-surface-border);
  }

  .nav-logo {
    margin-bottom: var(--wa-space-m);
    text-align: center;
  }

  .project-logo {
    max-width: 100%;
    height: auto;
    border-radius: var(--wa-border-radius-m);
  }

  .nav-search {
    width: 100%;
  }

  .docs-navigation {
    padding: var(--wa-space-m);
  }

  .nav-section {
    margin-bottom: var(--wa-space-l);
  }

  .nav-section-title {
    font-size: var(--wa-font-size-s);
    font-weight: var(--wa-font-weight-semibold);
    color: var(--wa-color-text-quiet);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0 0 var(--wa-space-s) 0;
  }

  .nav-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-list li {
    margin-bottom: var(--wa-space-2xs);
  }

  .nav-link {
    display: block;
    padding: var(--wa-space-xs) var(--wa-space-s);
    color: var(--wa-color-text-normal);
    text-decoration: none;
    border-radius: var(--wa-border-radius-s);
    transition: all var(--wa-transition-fast);
  }

  .nav-link:hover {
    background-color: var(--wa-color-neutral-fill-quiet);
    color: var(--wa-color-brand-fill-loud);
  }

  .nav-link.current {
    background-color: var(--wa-color-brand-fill-quiet);
    color: var(--wa-color-brand-on-quiet);
    font-weight: var(--wa-font-weight-semibold);
  }

  /* Article */
  .docs-article {
    max-width: 46rem;
    margin: 0 auto;
  }

  .article-header {
    margin-bottom: var(--wa-space-xl);
    padding-bottom: var(--wa-space-l);
    border-bottom: 1px solid var(--wa-color-surface-border);
  }

  .article-title {
    font-size: var(--wa-font-size-3xl);
    font-weight: var(--wa-font-weight-bold);
    line-height: var(--wa-line-height-tight);
    margin: 0 0 var(--wa-space-m) 0;
    color: var(--wa-color-text-normal);
  }

  .article-description {
    font-size: var(--wa-font-size-l);
    color: var(--wa-color-text-quiet);
    margin: 0 0 var(--wa-space-m) 0;
    line-height: var(--wa-line-height-relaxed);
  }

  .article-meta {
    display: flex;
    align-items: center;
    gap: var(--wa-space-m);
    font-size: var(--wa-font-size-s);
    color: var(--wa-color-text-quiet);
  }

  .edit-link {
    display: flex;
    align-items: center;
    gap: var(--wa-space-2xs);
    color: var(--wa-color-text-link);
    text-decoration: none;
    margin-left: auto;
  }

  .edit-link:hover {
    text-decoration: underline;
  }

  /* Article content */
  .article-content {
    line-height: var(--wa-line-height-relaxed);
  }

  .article-content h2,
  .article-content h3,
  .article-content h4,
  .article-content h5,
  .article-content h6 {
    margin-top: var(--wa-space-xl);
    margin-bottom: var(--wa-space-m);
    scroll-margin-top: var(--wa-space-xl);
  }

  .article-content p {
    margin-bottom: var(--wa-space-m);
  }

  .article-content ul,
  .article-content ol {
    margin-bottom: var(--wa-space-m);
    padding-left: var(--wa-space-l);
  }

  .article-content li {
    margin-bottom: var(--wa-space-xs);
  }

  .article-content code {
    background-color: var(--wa-color-neutral-fill-quiet);
    padding: var(--wa-space-3xs) var(--wa-space-2xs);
    border-radius: var(--wa-border-radius-s);
    font-size: 0.9em;
  }

  .article-content pre {
    background-color: var(--wa-color-surface-lowered);
    padding: var(--wa-space-m);
    border-radius: var(--wa-border-radius-m);
    overflow-x: auto;
    margin-bottom: var(--wa-space-m);
  }

  .article-content pre code {
    background: none;
    padding: 0;
  }

  /* Article navigation */
  .article-nav {
    display: flex;
    justify-content: space-between;
    gap: var(--wa-space-m);
    margin-top: var(--wa-space-2xl);
    padding-top: var(--wa-space-l);
    border-top: 1px solid var(--wa-color-surface-border);
  }

  .nav-prev,
  .nav-next {
    display: flex;
    align-items: center;
    gap: var(--wa-space-s);
    padding: var(--wa-space-m);
    background-color: var(--wa-color-surface-lowered);
    border: 1px solid var(--wa-color-surface-border);
    border-radius: var(--wa-border-radius-m);
    text-decoration: none;
    color: var(--wa-color-text-normal);
    transition: all var(--wa-transition-normal);
    flex: 1;
    max-width: 50%;
  }

  .nav-prev:hover,
  .nav-next:hover {
    background-color: var(--wa-color-brand-fill-quiet);
    border-color: var(--wa-color-brand-border-normal);
    color: var(--wa-color-brand-on-quiet);
  }

  .nav-next {
    justify-content: flex-end;
    text-align: right;
  }

  .nav-label {
    display: block;
    font-size: var(--wa-font-size-s);
    color: var(--wa-color-text-quiet);
    font-weight: var(--wa-font-weight-normal);
  }

  .nav-title {
    display: block;
    font-weight: var(--wa-font-weight-semibold);
  }

  /* Responsive adjustments */
  @media (max-width: 920px) {
    .docs-controls {
      flex-wrap: wrap;
    }

    .article-nav {
      flex-direction: column;
    }

    .nav-prev,
    .nav-next {
      max-width: 100%;
    }
  }

  @media (max-width: 640px) {
    .docs-header {
      flex-direction: column;
      align-items: stretch;
      gap: var(--wa-space-s);
    }

    .mobile-search-container {
      order: 2;
      max-width: none;
    }

    .docs-controls {
      justify-content: center;
      order: 3;
    }

    .article-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--wa-space-s);
    }

    .edit-link {
      margin-left: 0;
    }
  }

  /* Note: Mobile TOC/aside hiding is handled in the docs app (not in shared layout) */
</style>